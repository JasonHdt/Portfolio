* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
}

/* Ceci change la valeur d'un 'rem' en 10px au lieu de 16 px */
html {
    font-size: 62.5%;
}

/* Téléphone */

.center {
    /* Fait intéressant : Le .center est appliqué à <Div class= content center> donc on peut assigner plusieurs noms à la même classe */
    display: flex;
    justify-content: center;
    align-items: center;
}
.container {
    width: 100%;
    /* 100vh indique qu'il prendra 100% du viewport au lieu de la taille de la page. */
    height: 100vh;
    /* Plusieurs façons de procéder mais lui utilise la grid CSS */
    display: grid;
    place-items: center;
    /* 5rem représente le haut et le bas, et 20rem représente gauche et droite */
    padding: 5rem 20rem;
}

.contact{
    width: 100%;
    height: 100%;
    background-color: #d8dde2;
    /* Haut-gauche et bas droite sont 60rem et les autres 2rem  */
    border-radius: 60rem 2rem;
}

.contact > div {
    flex: 1;
    /* Selectionne les enfants. Flex : 1 = Setting Flex grow, Flex shrink , Flex basic? Ca veut dire que les objets flex vont remplir tout les espaces sur l'axe. Ce qui signifie qu'ils prendront une place équivalent sur celle qui est disponible sur l'axe principal */
}

.form-wrapper {
    flex-direction: column;
    gap: 5rem 0;
    /* Gap définie l'écarte entre les objets flex sur l'axe principale ou croisée. elle permet de mettre les écarts dans les colonnes et les lignes rapidement*/
}

.form-wrapper form {
flex-direction: column;
gap: 1.5rem 0;
}

.form-heading {
    font-size: 6rem;
    color: #3a3a58
}

form input,
textarea {
    width: 40rem;
    border: none;
    outline: none;
    background-color: #377e7e;
    border-radius: 2rem;
    font-size: 1.5rem;
    color: white;
    padding: 1rem 2rem;
}

input::placeholder,
textarea::placeholder {
    color: #fff;

}

textarea {
    resize: vertical;
    /* permet que le textarea ne se déforme qu'en vertical */
    max-height: 10rem;
    min-height: 5rem;
}

.form-btn {
    color:#df6218;

}
.telephone{
    width: 30rem;
    height: 20rem;
    background-color: #5f9ea0;
    border-radius: 100rem 100rem 20rem 20rem;
    /* De ce que je comprends : Position relative indique que si on suit l'organisation par défaut de la page, il serait en "Offset" par rapport à ça */
    position: relative;
    animation: telephoneAnim 4s infinite reverse; 
    /* animation: identifiant-de-l-animation durée loop ordre */
}

/* ">" signifie qu'il vise tous les enfants de ce parent. e.g : parent > enfants. Pour l'exemple ici position: absolute est appliqué à tous les enfants de Telephone.*/
.telephone > div {
    position: absolute;
}

/* @ visiblement indique au CSS comment il doit se comporter. changer "identifier" par le nom de l'animation*/
@keyframes telephoneAnim {
    /* Visiblement ça fonctionne avec des pourcentages de l'animation */
    0% {
        transform: rotateZ('0');
    }
    1%,
    3%,
    5%,
    7%,
    9%{
        transform: rotateZ('-1deg');
    }
    2%,
    3%,
    6%,
    8%,
    10%{
        transform: rotateZ('1deg');
    }
    11%,
    100%{
        transform: rotateZ(0);
    }
    
}

.telephone::after,
.telephone::before {
    /* Content indique un peu à quel partie du texte cet effet doit fonctionner. IL DOIT TOUJOURS ETRE AJOUTE */
    content: "";
    width: 7rem;
    height: 22rem;
    /* Position absolute signifie que peu importe comment est structuré la fenêtre cet objet sera toujours à cette position. */
    position: absolute;
    bottom: 0;
    border-radius: 5rem 5rem 0 0;
    background-color: #5f9ea0;
}
.telephone::after {
    right: 4rem;
}
.telephone::before {
    left: 4rem
}
.handle {
    width: 40rem;
    height: 5rem;
    background-color: #df6281;
    top : -7.2rem; /* Du coup... ca fait 72px ? */
    left : -5rem;
    border-radius : 5rem;
}

.handle::before,
.handle::after{
content:"";
position:absolute;
width: 6rem;
height: 4rem;
background-color: #f1bd78;
bottom: -4.3rem;
border-radius: 5rem;
}
.handle::after {
    right:0
}
.handle::before{
    left:0
}
.dialing-mechanism {
    width: 10rem;
    height: 10rem;
    background-color: #d8dde2;
    top: 5rem;
    left: 10rem;
    border-radius: 5rem;
    border: 2.5rem dotted #b0c1e4;
    z-index: 1; /* Comme foundryvtt, le Z-Index c'est l'axe Z en 3D donc la priorité d'affichage. */
}
.stand {
    width: 100%;
    height: 5rem;
    background-color: #377e7e;
    bottom: -5rem;
    border-radius: 5rem;
}

/* @media (max-width) ceci va changer les propriétés dedans par rapport à si la largeur maximum est égale à 1650px. Utiliser l'inspecteur pour vérifié ça en live. */
@media (max-width: 1650px) {
    .container{
        padding: 5rem;
    }
    .contact{
        border-radius: 30rem 2rem;
    }
}
@media (max-width: 1000px) {
    .container{
        padding: 0rem;
    }
    .contact{
        flex-direction: column-reverse;
        border-radius: 0;
    }
    .telephone-wrapper {
        margin-top: 10rem;
    }
}
@media (max-width: 700px) {
    html {
        font-size: 50%;
    }
}
@media (max-width: 400px) {
    html {
        font-size: 40%;
    }
}